{
  "swagger": "2.0",
  "info": {
    "title": "RentMe API",
    "description": "",
    "version": "1.0.0"
  },
  "host": "api.rentme.games",
  "basePath": "/",
  "tags": [
    {
      "name": "Auth",
      "description": "Auth endpoints"
    },
    {
      "name": "Users",
      "description": "Users endpoints"
    },
    {
      "name": "Services",
      "description": "Services endpoints"
    },
    {
      "name": "Players",
      "description": "Players endpoints"
    },
    {
      "name": "Dev",
      "description": "Dev endpoints"
    },
    {
      "name": "Conversations",
      "description": "Conversations endpoints"
    },
    {
      "name": "Managements",
      "description": "Managements endpoints"
    }
  ],
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "Authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "description": "Value: Bearer ",
      "in": "header",
      "scheme": "bearer"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/auth/": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to get user info",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to login user",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Adding new user.",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "rentme1"
                },
                "password": {
                  "type": "string",
                  "example": "Str0ng!Passw0rd"
                }
              }
            }
          }
        ],
        "responses": {}
      }
    },
    "/api/auth/google": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to login user with google account",
        "parameters": [],
        "responses": {}
      }
    },
    "/api/auth/facebook": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to login user with facebook account",
        "parameters": [],
        "responses": {}
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to register user",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Adding new user.",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "rentme1234"
                },
                "email": {
                  "type": "string",
                  "example": "rentme1244@rentme.games"
                },
                "password": {
                  "type": "string",
                  "example": "Str0ng!Passw0rd"
                },
                "fullName": {
                  "type": "string",
                  "example": "RentMe Games 1234"
                }
              }
            }
          }
        ],
        "responses": {}
      }
    },
    "/api/auth/forgot-password": {
      "patch": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to forgot password",
        "parameters": [],
        "responses": {}
      }
    },
    "/api/auth/reset-password": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to reset password",
        "parameters": [
          {
            "name": "obj",
            "in": "params",
            "description": "token to reset password",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "token"
                }
              }
            }
          }
        ],
        "responses": {}
      }
    },
    "/api/users/": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to register a specific user with specific role (ADMIN ONLY)",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "User information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to get one users with specific id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to update user info with specific id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "User information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserInfo"
            }
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/users/{id}/transactions": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to perform transaction (deposit or withdraw money)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "User information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PerformTransaction"
            }
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to get transactions of user with with specific id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/users/{id}/avatar": {
      "patch": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to update avatar of user with with specific id",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": "true"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/users/{id}/password": {
      "patch": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to change password of user with with specific id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "User information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePassword"
            }
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/users/{id}/soft": {
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to perform soft delete user (move user to bin) with with specific id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/users/{id}/messages": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to get all notifications with with specific id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to perform delete all notifications of user with with specific id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/users/{id}/messages/{msgId}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to perform mark message as read of user with specific id as well message with specific id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "msgId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Message ID"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to perform delete a notification of user with with specific id as well message with specific id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "msgId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Message ID"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/users/{id}/transfers": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to get all transfers of user with with specific id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/services/": {
      "post": {
        "tags": [
          "Services"
        ],
        "description": "Endpoint to create service (ADMIN ONLY)",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "get": {
        "tags": [
          "Services"
        ],
        "description": "Endpoint to get all services",
        "parameters": [],
        "responses": {}
      }
    },
    "/api/services/{id}": {
      "get": {
        "tags": [
          "Services"
        ],
        "description": "Endpoint to get a service",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Services ID"
          }
        ],
        "responses": {}
      }
    },
    "/api/dev/": {
      "get": {
        "tags": [
          "Dev"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/dev/upload-images": {
      "post": {
        "tags": [
          "Dev"
        ],
        "description": "",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/dev/upload-image": {
      "post": {
        "tags": [
          "Dev"
        ],
        "description": "",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/dev/upload-video": {
      "post": {
        "tags": [
          "Dev"
        ],
        "description": "",
        "parameters": [],
        "responses": {}
      }
    },
    "/api/dev/upload-audio": {
      "post": {
        "tags": [
          "Dev"
        ],
        "description": "",
        "parameters": [],
        "responses": {}
      }
    },
    "/api/dev/users": {
      "delete": {
        "tags": [
          "Dev"
        ],
        "description": "",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/dev/generate-sample-profile-player": {
      "post": {
        "tags": [
          "Dev"
        ],
        "description": "",
        "parameters": [],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/players/": {
      "get": {
        "tags": [
          "Players"
        ],
        "description": "Endpoint to get all players",
        "parameters": [],
        "responses": {}
      },
      "post": {
        "tags": [
          "Players"
        ],
        "description": "Endpoint to register to become player",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/players/{id}": {
      "get": {
        "tags": [
          "Players"
        ],
        "description": "Endpoint to get one player",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Player ID"
          }
        ],
        "responses": {}
      }
    },
    "/api/players/{id}/reviews": {
      "get": {
        "tags": [
          "Players"
        ],
        "description": "Endpoint to get all reviews of a player",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Player ID"
          }
        ],
        "responses": {}
      },
      "post": {
        "tags": [
          "Players"
        ],
        "description": "Endpoint to create review on player profile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Player ID"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/players/{id}/donate": {
      "post": {
        "tags": [
          "Players"
        ],
        "description": "Endpoint to donate to a player",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Player ID"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/players/{id}/follow": {
      "patch": {
        "tags": [
          "Players"
        ],
        "description": "Endpoint to follow a player",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Player ID"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/files/users": {
      "post": {
        "tags": [
          "Dev"
        ],
        "description": "",
        "parameters": [],
        "responses": {}
      },
      "get": {
        "tags": [
          "Dev"
        ],
        "description": "",
        "parameters": [],
        "responses": {}
      }
    },
    "/api/tradings/auth": {
      "post": {
        "tags": [
          "Tradings"
        ],
        "description": "Endpoint to auth user when access chat room",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/managements/users": {
      "get": {
        "tags": [
          "Managements"
        ],
        "description": "Endpoint to get all users",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Managements"
        ],
        "description": "Endpoint to get create users with specific role",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "User information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Managements"
        ],
        "description": "Endpoint to restore delete users",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "UserId array",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ids": {
                  "type": "array",
                  "example": [
                    "abc",
                    "xyz"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Managements"
        ],
        "description": "Endpoint to update user info",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "User information.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": ""
                },
                "fullName": {
                  "type": "string",
                  "example": ""
                },
                "username": {
                  "type": "string",
                  "example": ""
                },
                "email": {
                  "type": "string",
                  "example": ""
                },
                "password": {
                  "type": "string",
                  "example": ""
                },
                "province": {
                  "type": "string",
                  "example": ""
                },
                "role": {
                  "type": "number",
                  "example": 3
                }
              }
            }
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/managements/users/soft": {
      "delete": {
        "tags": [
          "Managements"
        ],
        "description": "Endpoint to soft delete users",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "UserId array",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ids": {
                  "type": "array",
                  "example": [
                    "abc",
                    "xyz"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/managements/users/force": {
      "delete": {
        "tags": [
          "Managements"
        ],
        "description": "Endpoint to force delete users",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "UserId array",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ids": {
                  "type": "array",
                  "example": [
                    "abc",
                    "xyz"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/managements/users/deleted": {
      "get": {
        "tags": [
          "Managements"
        ],
        "description": "Endpoint to get delete users",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/managements/players": {
      "get": {
        "tags": [
          "Managements"
        ],
        "description": "Endpoint to filter players",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Managements"
        ],
        "description": "Endpoint to get ban players",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/managements/players/{id}": {
      "put": {
        "tags": [
          "Managements"
        ],
        "description": "Endpoint to update player information",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Player ID"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/managements/players/v1": {
      "get": {
        "tags": [
          "Managements"
        ],
        "description": "",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/managements/players/banned": {
      "get": {
        "tags": [
          "Managements"
        ],
        "description": "Endpoint to get banned players information",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/managements/statistics/profits": {
      "get": {
        "tags": [
          "Managements"
        ],
        "description": "Endpoint to calculate profits of rentme",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/managements/statistics/summary": {
      "get": {
        "tags": [
          "Managements"
        ],
        "description": "",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/conversations/others": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "description": "Endpoint to get recent contact",
        "parameters": [],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/conversations/{userId}": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "description": "Endpoint to get all message of user with specific id",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Conversations"
        ],
        "description": "Endpoint to send a message of user with specific id",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {},
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    }
  },
  "definitions": {
    "CreateUser": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "test123"
        },
        "password": {
          "type": "string",
          "example": "Test!Passw0rd"
        },
        "email": {
          "type": "string",
          "example": "test123@gmail.com"
        },
        "fullName": {
          "type": "string",
          "example": "test"
        },
        "role": {
          "type": "number",
          "example": 3
        }
      },
      "required": [
        "username",
        "password",
        "email",
        "fullName",
        "role"
      ]
    },
    "UpdateUserInfo": {
      "type": "object",
      "properties": {
        "fullName": {
          "type": "string",
          "example": ""
        },
        "nickname": {
          "type": "string",
          "example": ""
        },
        "birthDate": {
          "type": "string",
          "example": ""
        },
        "gender": {
          "type": "string",
          "example": ""
        },
        "province": {
          "type": "string",
          "example": ""
        }
      },
      "required": [
        "fullName",
        "nickname",
        "birthDate",
        "gender",
        "province"
      ]
    },
    "UpdatePassword": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "example": ""
        },
        "newPassword": {
          "type": "string",
          "example": ""
        }
      },
      "required": [
        "password",
        "newPassword"
      ]
    },
    "PerformTransaction": {
      "type": "object",
      "properties": {
        "money": {
          "type": "number",
          "example": 1
        },
        "type": {
          "type": "string",
          "example": "deposit"
        },
        "paymentMethod": {
          "type": "string",
          "example": "momo"
        }
      },
      "required": [
        "money",
        "type",
        "paymentMethod"
      ]
    }
  }
}